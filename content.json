{"meta":{"title":"Hong's Blog","subtitle":null,"description":"无心算法则用宏","author":"Hong","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2017-09-06T07:37:18.000Z","updated":"2019-04-28T14:22:22.974Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com//404.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-01T17:59:52.000Z","updated":"2019-05-01T18:00:14.187Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-05-01T17:57:26.000Z","updated":"2019-05-01T17:58:08.364Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"code try","slug":"code-try","date":"2019-04-29T00:50:42.000Z","updated":"2019-04-29T00:52:29.358Z","comments":true,"path":"uncategorized/code-try/","link":"","permalink":"http://yoursite.com/uncategorized/code-try/","excerpt":"","text":"This is the code trying1234567891011121314public class SimpleSingleton &#123; private static SimpleSingleton singleInstance = new SimpleSingleton(); //Marking default constructor private //to avoid direct instantiation. private SimpleSingleton() &#123; &#125; //Get instance for class SimpleSingleton public static SimpleSingleton getInstance() &#123; return singleInstance; &#125; &#125;","categories":[],"tags":[]},{"title":"my code","slug":"my-code","date":"2019-04-28T12:08:13.000Z","updated":"2019-05-01T18:00:50.073Z","comments":true,"path":"测试/my-code/","link":"","permalink":"http://yoursite.com/测试/my-code/","excerpt":"","text":"","categories":[{"name":"测试","slug":"测试","permalink":"http://yoursite.com/categories/测试/"}],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-04-27T02:48:42.282Z","updated":"2019-04-28T16:15:42.114Z","comments":true,"path":"uncategorized/hello-world/","link":"","permalink":"http://yoursite.com/uncategorized/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartSubmit现在主要一步就可以搞定部署和提交 @honggit: 更新hexo d –g ——部署加提交到Github12$ hexo clean$ hexo d --g hexo clean ——清除缓存hexo g —– 提交到仓库hexo s —– 查看当前状态hexo d —– 开始部署（由于github的原因，部署要等一定时间才可以看到更新的状态，大概3-5分钟）1234$ hexo clean$ hexo g$ hexo s$ hexo d Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"标签1","slug":"标签1","permalink":"http://yoursite.com/tags/标签1/"}]},{"title":"交互选择界面（c语言）","slug":"交互选择界面（c语言）","date":"2019-04-09T10:06:36.000Z","updated":"2019-05-02T02:40:53.468Z","comments":true,"path":"uncategorized/交互选择界面（c语言）/","link":"","permalink":"http://yoursite.com/uncategorized/交互选择界面（c语言）/","excerpt":"","text":"选择交互式界面 一个交互式界面是用户和终端交流的形式。是以用户为中心的设计流程，关注用户的使用流畅度和方便性，符合用户使用习惯的解决方案。交互不一定需要很华丽的界面，但是使用过程肯定是很人性化，减少用户思考返回的次数。 无论在web开发，UI设计等，程序员构建了代码并且提交到终端，发布给用户，但是用户在使用时候面对着开发者的设计界面去操作时候，看到不同的交互式界面就有着怎么样的使用心情。 c语言也涉及到这个知识，老师叫你写一个顺序栈（实现初始化，入栈，出栈，删除栈等选择功能），让你设计去给他操作 是这种界面好看？ 还是….. 以下代码基于printf和条件语句1.简单版1234567891011121314151617181920212223242526272829303132 int main（） &#123; while(1)//死循输入框 &#123;printf ( &quot;\\n&quot; );printf ( &quot;\\n&quot; );printf ( &quot; ******************欢饮来到栈de环节*************\\n&quot; );printf ( &quot; ______________________________________________________________________________\\n&quot; );printf ( &quot; |----&gt; 请选择输入你要操作的选择 &lt;----|\\n&quot; );printf ( &quot; |----&gt; 1: 创建栈 &lt;----|\\n&quot; );printf ( &quot; |----&gt; 2：判断栈是不是空 &lt;----|\\n&quot; );printf ( &quot; |----&gt; 3：入栈 &lt;----|\\n&quot; );printf ( &quot; |----&gt; 4：出栈 &lt;----|\\n&quot; );printf ( &quot; |----&gt; 5：检测栈的长度 &lt;----|\\n&quot; );printf ( &quot; |----&gt; 6：清空栈 &lt;----|\\n&quot; );printf ( &quot; |----&gt; 7：得到栈顶元素 &lt;----|\\n&quot; );printf ( &quot; |----&gt; 8：打印栈的元素 &lt;----|\\n&quot; );printf ( &quot; |_____________________________________________________________________________|\\n&quot; );int choice;printf(&quot;请输入你的选择\\n&quot;);scanf(&quot;%d&quot;,&amp;choice);switch(choice)&#123; case 1: break; case 2: break; &#125; &#125; 弊端：界面是好看多了，但是交互式做的不好，每次用户输入一次就重新显示新的对话框，用户执行多了上下拉的条条就会很长 2.进阶版 #include&lt;stdio.h&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344 /*封装输入函数*/ int init() &#123; int choice, confirm; printf( &quot;\\n\\t|_________________________________________________________|\\t\\n&quot; &quot;\\t|1:初始化队列 |\\t\\n&quot; &quot;\\t|2:入队 |\\t\\n&quot; &quot;\\t|3:出队 |\\t\\n&quot; &quot;\\t|4:检测队列长度 |\\t\\n&quot; &quot;\\t|5:判断队列是否为空 |\\t\\n&quot; &quot;\\t|6:判断队列是否已满 |\\t\\n&quot; &quot;\\t|7:清空队列 |\\t\\n&quot; &quot;\\t|8:销毁队列 |\\t\\n&quot; &quot;\\t|9:退出程序 |\\t\\n&quot; &quot;\\t|_________________________________________________________|\\t\\n\\n&quot; ); printf(&quot;\\t请输入你想进行的操作：&quot;); scanf(&quot; %d&quot;, &amp;choice); while ((confirm = getchar()) != &apos;\\n&apos;)//用户再次输入空格键才表示其真正确认 continue; //输入检测 while (choice != 9 &amp;&amp; (choice &lt; 1 || choice &gt; 8))//判断执行1-8，并且检测合法输入 &#123; printf(&quot;\\t您的输入: &apos;%d&apos; 有误!请重新输入：&quot;, choice); scanf(&quot; %d&quot;, &amp;choice); &#125; return choice;&#125;int main()&#123; int choice; while ((choice=init())&amp;&amp;choice!=9) &#123; printf(&quot;\\n\\t程序在进行\\n&quot;); //以下写你的判断代码 &#125; printf(&quot;\\n\\t程序结束，感谢您的使用谢谢\\n&quot;); system(&quot;pause&quot;);&#125; 优点： 1.每执行一次操作都停留在此界面 2.有错误输入判断 3.退出程序直接结束","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","permalink":"http://yoursite.com/tags/CSDN迁移/"}]},{"title":"手把手写github（5）（界面篇1）","slug":"手把手写github（5）（界面篇1）","date":"2019-04-06T08:21:27.000Z","updated":"2019-05-02T02:40:54.189Z","comments":true,"path":"uncategorized/手把手写github（5）（界面篇1）/","link":"","permalink":"http://yoursite.com/uncategorized/手把手写github（5）（界面篇1）/","excerpt":"","text":"界面篇——顾名思义就是我只用github不用Git操作 毕竟git代码还是不如直接操作简单。比如说我上传东西到远程仓库github代码几行才搞的定，我这里只要点一些创建、写入、提交就行了（还不用记住那些代码） 1.创建文件夹 不少人都点击创建文件时候出来的结果都是一个文件而不是文件夹,而且上传时候也是只能上传那种带后缀的（例.c .py）文件，而不能上传文件夹，其实不然，都是可以的。 (1)点击creat new file 如果你只是写一个名字就提交了 结果是：这样 出现的是文件形式 but… (2)在saS后面加一个/ github这边就会自动帮我们识别为一个文件夹，这时候后面可以再建一个子文件夹（和刚刚一样或者就加一个文件） （3）提交后 就会出现文件夹格式了（我改了名字） 2.上传一个文件夹 点击Upload files 如果你是点击choose your files就只能上传文件了。 上传文件夹就直接拖拉文件夹到这个位置就行了。 未完待续….","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","permalink":"http://yoursite.com/tags/CSDN迁移/"}]},{"title":"手把手学会gitbub（4）","slug":"手把手学会gitbub（4）","date":"2019-04-05T08:38:20.000Z","updated":"2019-05-02T02:40:55.259Z","comments":true,"path":"uncategorized/手把手学会gitbub（4）/","link":"","permalink":"http://yoursite.com/uncategorized/手把手学会gitbub（4）/","excerpt":"","text":"git操作指令windows系统 注：以下操作最好按顺序来！！ 1.用户名和邮箱（自报家门） 上传或者修改自己的用户名和邮箱 123git config --global user.name &quot;your name&quot;git config --global user.email &quot;your email&quot; 查看用户名和邮箱 123git config user.namegit config user.email 2.创建版本库1.创建文件夹1mkdir learngit 2.进入到文件夹1cd 文件名 3.查看当前所在的文件(显示当前目录)1pwd 4.把当前目录变为Git可管理的仓库1git init 会告诉你是一个空的仓库，Initialized empty Git repository in（已在XXX中初始化空Git存储库） 5.添加文件到仓库 1.先新建一个新的文件（有没有后缀都没事） 2.git add 文件名（有后缀的加后缀） 3.用命令 git commit 告诉Git，把文件提交到仓库： 1git commit -m &quot;随便写（就是文件的说明）&quot;","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","permalink":"http://yoursite.com/tags/CSDN迁移/"}]},{"title":"手把手学会github（3）","slug":"手把手学会github（3）","date":"2019-02-28T02:08:20.000Z","updated":"2019-05-02T02:40:56.416Z","comments":true,"path":"uncategorized/手把手学会github（3）/","link":"","permalink":"http://yoursite.com/uncategorized/手把手学会github（3）/","excerpt":"","text":"1.git和github的区别 git 是一个版本管理工具，是可以在你电脑不联网的情况下，只在本地使用的一个版本管理工具，其作用就是可以让你更好的管理你的程序，比如你原来提交过的内容，以后虽然修改了，但是通过git这个工具，可以把你原来提交的内容重现出来，这样对于你后来才意识到的一些错误的更改，可以进行还原。git用的是Linux指令，要想深入的建议去看视频或者上https://git-scm.com/官网看指令,如果只是小小的输出执行指令就上网查那些基本指令就行啦 github 是一个非常适合程序员交流的网站，很多国际上的技术大牛都在github上有自己的开源代码，其他人只要申请个账号就可以随意的看到这些大牛写的程序。同时国内的很多互联网公司如百度，阿里等，也在github上公布有开源的代码，感兴趣的程序员也可以自己查找着看一些。想看国内大公司的代码，可以看连接 2.下载git 点击官网https://git-scm.com/ 根据自己的系统选择 注：以下的安装操作过程可能根据版本不同不分先后！！ 剩下的一路下一步 最后一步就是把勾勾去掉 3.检验自己是否安装成功 跳转到桌面鼠标右键，看看有没有Git GUI Here 和Git Bash Here，有就安装成功了 恭喜！！","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","permalink":"http://yoursite.com/tags/CSDN迁移/"}]},{"title":"手把手学会github（2）","slug":"手把手学会github（2）","date":"2019-02-16T05:05:52.000Z","updated":"2019-05-02T02:40:56.950Z","comments":true,"path":"uncategorized/手把手学会github（2）/","link":"","permalink":"http://yoursite.com/uncategorized/手把手学会github（2）/","excerpt":"","text":"工欲善其事必先利其器 ！！！ 1.个人主页 仓库主页（前提你已经新建了一个新仓库） 删除仓库 注：删除要仓库名和密码验证 2.接下来就是创建一个新仓库 进入主页点击new（绿色的） 创建完成后就是有一个新仓库了接下来就是创建新文件，上传文件 1.创建新文件 创建完成后就是 2.上传文件 手动拖或者预览上传 3.编辑，删除（都会显示commits次数） 编辑和删除还有更多操作呢！ 编辑： 删除： 同理 反正就是很具体的一个github 剑气纵横三万里，一剑光寒十九州。 不去自己尝试还真的不知道有那么多 问君能有几多愁，你操作有多油！","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","permalink":"http://yoursite.com/tags/CSDN迁移/"}]},{"title":"手把手学会github（1）","slug":"手把手学会github（1）","date":"2019-02-16T03:45:36.000Z","updated":"2019-05-02T02:40:57.641Z","comments":true,"path":"uncategorized/手把手学会github（1）/","link":"","permalink":"http://yoursite.com/uncategorized/手把手学会github（1）/","excerpt":"","text":"什么是github 前言：作为各界大佬 必用的博客，github的功能很强大，它是开源的，GitHub聚集了开源社区中顶尖的项目与开发者，也推动了很多新项目的发展，可以上传文件，写项目，写代码等等，它的功能强大也就意味它的操作就没有像微博，csdn等博客那么简单。 小要点：因为这是外国人创建的，我们也是用外国的服务器操作，所以操作过程有点慢还是正常，而且它是全英文的，不建议用什么插件来翻译它（这样才能感受它带来的魅力！！），最好的插件就是百度翻译。 在开始创建github账号之前要了解几个名词 注：这要讲的可能有点无聊，但是很重要！！！而且是你创建账号后在主页并且你经常要点击的几个英文字母 1.仓库（repository） 就是你的项目名称，相当于你的一个大c盘，里面放和某个项目有关的东西 2.收藏（star） 就是你可以收藏别人的项目，别人可以收藏你的项目，但是github会注明原创是谁（是不是不用怕被侵权咯！）还有，就是看你粉丝有多少咯 3.复制克隆改进项目（fork） 就是别人想改你的项目 或者 你想改别人的项目就点击这个 进入项目后 1.code 就是你的项目子目录（有readme，你写的项目，上传的文件等） 2.issue（问题） 就是别人和你讨论的发言 3.pull request（拉起请求） 就是你改了别人的东西想让别人也同步你方案就可以点击这个 关注（watch） 就是你点了订阅别人的，别人这个项目有进展你就会第一时间收到 点赞（star） 你懂得 接下来就是创建账号咯（github.com） 用户名写英文或者有数字！ 这里有三步，记得第一步要验证邮箱（必须把github邮箱拉近白名单不然收不到） 接下来就第二步第三步就行了，注意第二步要选择公开（public）或者是私人（private）私人是要钱的，就公开就行啦！又不是见不得人 1接下来就擦创建完成啦！！！ Author by 宏大大","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","permalink":"http://yoursite.com/tags/CSDN迁移/"}]},{"title":"单片机笔记1.1","slug":"单片机笔记1.1","date":"2019-01-20T14:06:34.000Z","updated":"2019-05-02T02:40:58.233Z","comments":true,"path":"uncategorized/单片机笔记1.1/","link":"","permalink":"http://yoursite.com/uncategorized/单片机笔记1.1/","excerpt":"","text":"单片机笔记 Author by 宏大大 Time：2019.1.20 content：单片机stm32 其实就是小弟的一些心得和见解，学习的过程中有点很多问题，就记录最基本的，总的来说学习硬件还是挺好的，毕竟纯软的话自己也没什么兴趣，最大的殷切就是希望自己能够坚持下来，不管最后自己是继续走纯硬，还是软硬结合（即嵌入式），亦或者是放弃了（还是不要这么说），能学到一份技术对未来真的有很大的帮助！ 单片机1.1之建工程的要点1前方高能！！！ 1.新建项目工程，一开始保存工程到文件夹（我叫他一号文件夹），然后在一号文件夹里面建立二号文件USER、OBJ（就是要把生成的.hex文件放在这里）、COER、FWLIB、还有自己需要的例如LED、BEEP…再吧对应的.c和.文件放在二号文件里面。 2.把二号文件加到项目工程（注：OBJ文件不添加进去）里面： 3.然后就是让编译生成的.hex文件默认放在OBJ文件下：点击魔术棒，玩mdk的应该都知道魔术棒在哪里，然后… 4.让电脑认识.h文件：还是点魔术棒… 反正吧上面的二号文件全部放进去，要注意，每写新的文件就是说有了新的.h文件要使用就要path进来 5.在第四步图片那里的Define写 STM32F10X_HD,USE_STDPERIPH_DRIVER 6.编译一下才可以看到头文件被包含，要是看到0 error和0 warming更加欣喜啦（自信点） 7.写mdk5防止写注释出现乱码：edit-》configuration-》encoding调成chinese GB2312，然后tab size调到4 下期预告1.2 | 代码寄存器库函数 --- | ------------- 1.3 | 自己手写一个工程（开源过） 放一段代码 12345678910111213141516171819#include &quot;key.h&quot;#include &quot;stm32f10x.h&quot;void key_init(void)&#123; RCC-&gt;APB2ENR|=1&lt;&lt;2; RCC-&gt;APB2ENR|=1&lt;&lt;6; GPIOA-&gt;CRL&amp;=0XFFFFFFF0; GPIOA-&gt;CRL|=0X00000008;//上拉和下拉输入那块 GPIOE-&gt;CRL&amp;=0XFFF000FF; GPIOE-&gt;CRL|=0X00088800;//上拉和下拉输入那块 GPIOA-&gt;ODR|=0&lt;&lt;0;//pa0先置低 GPIOE-&gt;ODR|=1&lt;&lt;2|1&lt;&lt;3|1&lt;&lt;4;//pe2~4置高 &#125;","categories":[],"tags":[{"name":"CSDN迁移","slug":"CSDN迁移","permalink":"http://yoursite.com/tags/CSDN迁移/"}]}]}